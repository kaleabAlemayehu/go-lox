// Code generated by "stringer -type=TokenType -trimprefix=TokenType_"; DO NOT EDIT.

package main

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TokenType_LeftParen-0]
	_ = x[TokenType_RightParen-1]
	_ = x[TokenType_LeftBrace-2]
	_ = x[TokenType_RightBrace-3]
	_ = x[TokenType_Comma-4]
	_ = x[TokenType_Dot-5]
	_ = x[TokenType_Minus-6]
	_ = x[TokenType_Plus-7]
	_ = x[TokenType_Semicolon-8]
	_ = x[TokenType_Slash-9]
	_ = x[TokenType_Star-10]
	_ = x[TokenType_Bang-11]
	_ = x[TokenType_BangEqual-12]
	_ = x[TokenType_Equal-13]
	_ = x[TokenType_EqualEqual-14]
	_ = x[TokenType_Greater-15]
	_ = x[TokenType_GreaterEqual-16]
	_ = x[TokenType_Less-17]
	_ = x[TokenType_LessEqual-18]
	_ = x[TokenType_Identifier-19]
	_ = x[TokenType_String-20]
	_ = x[TokenType_Number-21]
	_ = x[TokenType_And-22]
	_ = x[TokenType_Class-23]
	_ = x[TokenType_Else-24]
	_ = x[TokenType_False-25]
	_ = x[TokenType_Fun-26]
	_ = x[TokenType_For-27]
	_ = x[TokenType_If-28]
	_ = x[TokenType_Nil-29]
	_ = x[TokenType_Or-30]
	_ = x[TokenType_Print-31]
	_ = x[TokenType_Return-32]
	_ = x[TokenType_Super-33]
	_ = x[TokenType_This-34]
	_ = x[TokenType_True-35]
	_ = x[TokenType_Var-36]
	_ = x[TokenType_While-37]
	_ = x[TokenType_EOF-38]
}

const _TokenType_name = "LeftParenRightParenLeftBraceRightBraceCommaDotMinusPlusSemicolonSlashStarBangBangEqualEqualEqualEqualGreaterGreaterEqualLessLessEqualIdentifierStringNumberAndClassElseFalseFunForIfNilOrPrintReturnSuperThisTrueVarWhileEOF"

var _TokenType_index = [...]uint8{0, 9, 19, 28, 38, 43, 46, 51, 55, 64, 69, 73, 77, 86, 91, 101, 108, 120, 124, 133, 143, 149, 155, 158, 163, 167, 172, 175, 178, 180, 183, 185, 190, 196, 201, 205, 209, 212, 217, 220}

func (i TokenType) String() string {
	if i < 0 || i >= TokenType(len(_TokenType_index)-1) {
		return "TokenType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TokenType_name[_TokenType_index[i]:_TokenType_index[i+1]]
}
